# -*- coding: utf-8 -*-
"""artigo_series.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BQAwtiRXRDBmy73Y2tf2Zo-daf9j2Wux

# Séries temporais

# Leitura e limpeza dos dados
"""

import pandas as pd
data = pd.read_csv("soja.csv",sep=";")
data = data.replace("/[0-9][0-9]", "", regex=True)  
data['ano'] = pd.to_datetime(data['ano'])
data = data.set_index('ano')
data.head()

"""# Decomposição da série"""

from statsmodels.tsa.seasonal import seasonal_decompose
import matplotlib.pyplot as plt
import numpy as np

result = seasonal_decompose(data, model='aditive')


fig, (ax1,ax2,ax3, ax4) = plt.subplots(4,1, figsize=(12,8))
result.observed.plot(ax=ax1)
result.trend.plot(ax=ax2)
result.seasonal.plot(ax=ax3)
result.resid.plot(ax=ax4)
plt.tight_layout()

"""# Modelo Auto Arima"""

pip install pyramid-arima

from pmdarima.arima import auto_arima
import pandas as pd
data = pd.read_csv("soja.csv",sep=";")
data = data.replace("/[0-9][0-9]", "", regex=True)  
data['ano'] = pd.to_datetime(data['ano'])

model = auto_arima(data.rend)

"""# Hold out"""

from statsmodels.tsa.arima_model import ARIMA
from sklearn.metrics import mean_squared_error

data = data.set_index('ano')
X = data.rend
size = int(len(X) * 0.70)
train, test = X[0:size], X[size:len(X)]
model_fit = model.fit(train)

"""# Visualização dos dados"""

future_forecast = model_fit.predict(n_periods=13)
future_forecast = pd.DataFrame(future_forecast,index = test.index,columns=['Prediction'])

pd.concat([test,future_forecast],axis=1).plot()

pd.concat([data,future_forecast],axis=1).plot()